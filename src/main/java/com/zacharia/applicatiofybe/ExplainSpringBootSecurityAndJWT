package com.zacharia.applicatiofybe.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.converter.json.GsonBuilderUtils;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;


@Component
public class JwtUtil {
    @Value("${JWT_SECRET}")
    private String secret;

    @Value("${JWT_EXPIRATION}")
    private long expiration;

    //Step 1:
    public SecretKey getSigningKey() {
        return Keys.hmacShaKeyFor(secret.getBytes());
    }


    //Step 2:
    // Updated method to use parserBuilder() and verifyWith()
    private Claims extractAllClaims(String token) {
//        System.out.println("#############" + token);
//        System.out.println("%%%%%%%%%%%%" + secret);

        return Jwts.parser()
                .verifyWith(getSigningKey())
                .build()
                .parseSignedClaims(token) // Use parseSignedClaims
                .getPayload(); // use getPayload instead of getBody
    }

    //Step 3:
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    //Step 4:
    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);

    }

    //Step 5:
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    //Step 6:
    private Boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    //Step 7:
    private String createToken(Map<String, Object> claims, String subject) {
        return Jwts.builder()
                .claims(claims)
                .subject(subject)
                .issuedAt(new Date(System.currentTimeMillis()))
                .expiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(getSigningKey(), Jwts.SIG.HS256)
                .compact();
    }


    //Step 8:
    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        return createToken(claims, userDetails.getUsername());
    }

    //Step 9:
    public Boolean validateToken(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

}



package com.zacharia.applicatiofybe.util;

import com.zacharia.applicatiofybe.service.UserDetailsServiceImpl;
import io.jsonwebtoken.ExpiredJwtException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private UserDetailsServiceImpl userDetailsService;

    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {
        String path = request.getRequestURI();
        return path.equals("/api/auth/signIn") || path.equals("/api/auth/signUp");
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        final String authorizationHeader = request.getHeader("Authorization");

        String username = null;
        String jwt = null;


            if(authorizationHeader != null && authorizationHeader.startsWith("Bearer ")){
                jwt = authorizationHeader.substring(7);
                try{
                    username = jwtUtil.extractUsername(jwt);

                }catch(ExpiredJwtException e){
                    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                    response.getWriter().write("Expired JWT token");
                    return;

                }catch(Exception e){
                    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                    response.getWriter().write("Invalid JWT token");
                    return;

                }
                System.out.println("Username:" + username);
                System.out.println("JWT inside the JwtAuthenticationFilter:" + jwt);

            }
            if(username != null && authorizationHeader.startsWith("Bearer ")){
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);

                if(jwtUtil.validateToken(jwt,userDetails)){
                    UsernamePasswordAuthenticationToken authenticationToken =
                            new UsernamePasswordAuthenticationToken(userDetails,null,userDetails.getAuthorities());
                    authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                    SecurityContextHolder.getContext().setAuthentication(authenticationToken);
                }
            }
            filterChain.doFilter(request, response);

    }


}




package com.zacharia.applicatiofybe.service;

import com.zacharia.applicatiofybe.entity.AccountEntity;
import com.zacharia.applicatiofybe.repository.AccountRepository;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.HashSet;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {

    private final AccountRepository accountRepository;

    public UserDetailsServiceImpl(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        AccountEntity accountEntity = accountRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with username: " + username));

        /*
            The User class converts Account to UserDetails (Account returns Optional)
            User Class: This is a built-in Spring Security implementation of UserDetails.
             It stores user details like:
                    Username (account.getUsername())
                    Password (account.getPassword())
                    Authorities (roles/permissions): In this case, it's an empty set (new HashSet<>())
                                                     because no roles or permissions are being set here.
        */
        return new User(accountEntity.getUsername(), accountEntity.getPassword(), new HashSet<>());
    }

}






package com.zacharia.applicatiofybe.service;

import com.zacharia.applicatiofybe.dto.JwtResponseDTO;
import com.zacharia.applicatiofybe.dto.LoginRequestDTO;
import com.zacharia.applicatiofybe.dto.SignUpRequestDTO;
import com.zacharia.applicatiofybe.entity.AccountEntity;
import com.zacharia.applicatiofybe.exception.InvalidCredentialsException;
import com.zacharia.applicatiofybe.repository.AccountRepository;
import com.zacharia.applicatiofybe.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class AuthService {
    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private UserDetailsServiceImpl userDetailsServiceImpl;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private AccountRepository accountRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;


    public JwtResponseDTO authenticateUser(LoginRequestDTO loginRequestDTO) {

        try{

            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(loginRequestDTO.getUsername(), loginRequestDTO.getPassword()));

                    SecurityContextHolder.getContext().setAuthentication(authentication);
                    UserDetails userDetails = userDetailsServiceImpl.loadUserByUsername(loginRequestDTO.getUsername());

                    final String jwt = jwtUtil.generateToken(userDetails);
                    AccountEntity accountEntity = accountRepository.findByUsername(loginRequestDTO.getUsername())
                            .orElseThrow(() -> new RuntimeException("Account not found"));
    //                System.out.println("GENERATED JWT TOKEN: " + jwt);

                    return new JwtResponseDTO(jwt, accountEntity.getFirstName(), accountEntity.getLastName(), accountEntity.getUsername(), accountEntity.getId());
        }catch(Exception e){
            throw new InvalidCredentialsException("Invalid username or password");
        }
    }

    public JwtResponseDTO registerUser(SignUpRequestDTO signUpRequestDTO) {
        if(accountRepository.findByUsername(signUpRequestDTO.getUsername()).isPresent()) {
            throw new InvalidCredentialsException("Username is already taken!");
        }

        AccountEntity accountEntity = new AccountEntity();
        accountEntity.setUsername(signUpRequestDTO.getUsername());
        accountEntity.setFirstName(signUpRequestDTO.getFirstName());
        accountEntity.setLastName(signUpRequestDTO.getLastName());
        accountEntity.setPassword(passwordEncoder.encode(signUpRequestDTO.getPassword()));
        accountRepository.save(accountEntity);

        // Automatically authenticate after registration.
        UserDetails userDetails = userDetailsServiceImpl.loadUserByUsername(signUpRequestDTO.getUsername());
        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDetails,null,userDetails.getAuthorities());
        SecurityContextHolder.getContext().setAuthentication(authenticationToken);

        // Genrate Jwt Token
        final String jwt = jwtUtil.generateToken(userDetails);

        return new JwtResponseDTO(jwt, accountEntity.getFirstName(), accountEntity.getLastName(), accountEntity.getUsername(), accountEntity.getId());
    }


}





package com.zacharia.applicatiofybe.service;

import com.zacharia.applicatiofybe.dto.UpdateUserRequestDTO;
import com.zacharia.applicatiofybe.dto.UpdateUserResponseDTO;
import com.zacharia.applicatiofybe.entity.AccountEntity;
import com.zacharia.applicatiofybe.repository.AccountRepository;
import com.zacharia.applicatiofybe.util.JwtUtil;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;


@Service
public class AccountService{

    private final AccountRepository accountRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtUtil jwtUtil;
    private final UserDetailsServiceImpl userDetailsServiceImpl;

    public AccountService(AccountRepository accountRepository, PasswordEncoder passwordEncoder, JwtUtil jwtUtil, UserDetailsServiceImpl userDetailsServiceImpl) {
        this.accountRepository = accountRepository;
        this.passwordEncoder = passwordEncoder;
        this.jwtUtil = jwtUtil;
        this.userDetailsServiceImpl = userDetailsServiceImpl;
    }

    public UpdateUserResponseDTO updateUser(String username, UpdateUserRequestDTO updateUserRequestDTO){
        AccountEntity accountEntity = accountRepository.findByUsername(username)
                .orElseThrow(() ->  new RuntimeException("User not found."));

        if(updateUserRequestDTO.getFirstName() != null && !updateUserRequestDTO.getFirstName().isEmpty()){
            accountEntity.setFirstName(updateUserRequestDTO.getFirstName());
        }
        if(updateUserRequestDTO.getLastName() != null && !updateUserRequestDTO.getLastName().isEmpty()){
            accountEntity.setLastName(updateUserRequestDTO.getLastName());
        }

        if(updateUserRequestDTO.getPassword() != null && !updateUserRequestDTO.getPassword().isEmpty()){
            accountEntity.setPassword(passwordEncoder.encode(updateUserRequestDTO.getPassword()));
        }
        accountRepository.save(accountEntity);

        UserDetails userDetails = userDetailsServiceImpl.loadUserByUsername(username);

        String token = jwtUtil.generateToken(userDetails);
        return new UpdateUserResponseDTO(accountEntity.getId(), accountEntity.getFirstName(), accountEntity.getLastName(), accountEntity.getUsername(),token);
    }

    public void deleteAccount(String username){
        AccountEntity accountEntity = accountRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
        accountRepository.delete(accountEntity);
    }


}






package com.zacharia.applicatiofybe.repository;

import com.zacharia.applicatiofybe.entity.AccountEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface AccountRepository extends JpaRepository<AccountEntity,Long> {
    Optional<AccountEntity> findByUsername(String username);
}




package com.zacharia.applicatiofybe.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.Data;

import java.util.ArrayList;
import java.util.List;


@Data
@Entity
@Table(name ="accounts")
public class AccountEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    Long id;

    @Column(nullable = false, unique = true)
    private String username;
    @JsonIgnore
    @Column(nullable = false)
    private String password;
//    @ElementCollection(fetch = FetchType.EAGER)
//    @CollectionTable(name = "account_roles",joinColumns = @JoinColumn(name ="account_id"))
//    private Set<String> role;

    @Column(nullable = false)
    String firstName;
    @Column(nullable = false)
    String lastName;

    @JsonIgnore // Prevent serialization of job applications when serializing the account
    @OneToMany(mappedBy = "account", cascade = CascadeType.ALL, orphanRemoval = true)
    private List< JobApplicationEntity> jobApplication = new ArrayList<>();


}




package com.zacharia.applicatiofybe.controller;

import com.zacharia.applicatiofybe.dto.JwtResponseDTO;
import com.zacharia.applicatiofybe.dto.LoginRequestDTO;
import com.zacharia.applicatiofybe.dto.SignUpRequestDTO;
import com.zacharia.applicatiofybe.service.AuthService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

//@CrossOrigin
@CrossOrigin(origins = "http://localhost:4200")

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private AuthService authService;

    @PostMapping("/signIn")
    public ResponseEntity<?> authenticateUser(@RequestBody LoginRequestDTO loginRequestDTO) {
        JwtResponseDTO jwtResponseDTO = authService.authenticateUser(loginRequestDTO);
        return ResponseEntity.ok(jwtResponseDTO);
    }

    @PostMapping("/signup")
    private ResponseEntity<?> registerUser(@RequestBody SignUpRequestDTO signUpRequestDTO) {
        JwtResponseDTO jwtResponseDTO = authService.registerUser(signUpRequestDTO);
        return ResponseEntity.ok(jwtResponseDTO);
    }
}







package com.zacharia.applicatiofybe.controller;


import com.zacharia.applicatiofybe.dto.UpdateUserRequestDTO;
import com.zacharia.applicatiofybe.dto.UpdateUserResponseDTO;
import com.zacharia.applicatiofybe.service.AccountService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("api/account")
//@CrossOrigin
public class UserController {

    private final AccountService accountService;
    public UserController(AccountService accountService){
        this.accountService = accountService;
    }

    @PutMapping("/update/{username}")
    public ResponseEntity<UpdateUserResponseDTO> updateAccount( @PathVariable String username, @RequestBody UpdateUserRequestDTO updateUserRequestDTO ){
        UpdateUserResponseDTO updateUserResponseDTO = accountService.updateUser(username, updateUserRequestDTO);
        return ResponseEntity.ok(updateUserResponseDTO);
    }

    @DeleteMapping("/delete/{username}")
    public ResponseEntity<Map<String, String>> deleteAccount(@PathVariable String username){
        System.out.println("This is the username:  " + username);
        this.accountService.deleteAccount(username);
//        return ResponseEntity.ok("Account deleted Successfully.");
        Map<String, String> response = new HashMap<>();
        response.put("message", "Account deleted successfully.");

        return ResponseEntity.ok(response);
    }


}


package com.zacharia.applicatiofybe.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class JwtResponseDTO {
    private String token;
    private String firstName;
    private String lastName;
    private String username;
    private Long id;


}




package com.zacharia.applicatiofybe.dto;

import lombok.Data;

@Data
public class LoginRequestDTO {
    private String username;
    private String password;
}




package com.zacharia.applicatiofybe.dto;

import lombok.Data;

@Data
public class SignUpRequestDTO {
    private String firstName;
    private String lastName;
    private String username;
    private String password;
}






package com.zacharia.applicatiofybe.dto;

import lombok.Data;

@Data
public class UpdateUserRequestDTO {
    private String firstName;
    private String lastName;
    private String password;

}


package com.zacharia.applicatiofybe.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class UpdateUserResponseDTO {
    private Long id;
    private String firstName;
    private String lastName;
    private String username;
    private String token;
}
